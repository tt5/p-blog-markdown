# lua

There are two kinds of expressions in Lua

lvalue − Expressions that refer to a memory location is called "lvalue"
expression. An lvalue may appear as either the left-hand or right-hand side of
an assignment.

rvalue − The term rvalue refers to a data value that is stored at some address
in memory. An rvalue is an expression that cannot have a value assigned to it,
which means an rvalue may appear on the right-hand side, but not on the
left-hand side of an assignment.

In Lua, we can assign the function to variables and also can pass them as
parameters of another function.

```lua
myprint = function(param)
   print("This is my print function -   ##",param,"##")
end

function add(num1,num2,functionPrint)
   result = num1 + num2
   functionPrint(result)
end

myprint(10)
add(2,5,myprint)
```

```lua
function average(...)
   result = 0
   local arg = {...}
   for i,v in ipairs(arg) do
      result = result + v
   end
   return result/#arg
end

print("The average is",average(10,5,3,4,5,6))
```

```lua
string1 = "Lua"
string2 = 'Tutorial'
string3 = [["Lua Tutorial"]]
```

```lua
array = {"Lua", "Tutorial"}

for key,value in ipairs(array) 
do
   print(key, value)
end
```

The above example uses the default ipairs iterator function provided by Lua.

In Lua we use functions to represent iterators. Based on the state maintenance
in these iterator functions, we have two main types

    Stateless Iterators
    Stateful Iterators

```lua
function square(iteratorMaxCount,currentNumber)

   if currentNumber<iteratorMaxCount
   then
      currentNumber = currentNumber+1
      return currentNumber, currentNumber*currentNumber
   end

end

for i,n in square,3,0
do
   print(i,n)
end
```

```lua
function square(iteratorMaxCount,currentNumber)

   if currentNumber<iteratorMaxCount
   then
      currentNumber = currentNumber+1
      return currentNumber, currentNumber*currentNumber
   end

end

function squares(iteratorMaxCount)
   return square,iteratorMaxCount,0
end  

for i,n in squares(3)
do 
   print(i,n)
end
```

The previous example of iteration using function does not retain the state.
Each time the function is called, it returns the next element of the collection
based on a second variable sent to the function. To hold the state of the
current element, closures are used. Closure retain variables values across
functions calls. To create a new closure, we create two functions including the
closure itself and a factory, the function that creates the closure.

Let us now see an example of creating our own iterator in which we will be using closures.
Live Demo

```lua
array = {"Lua", "Tutorial"}
```

function elementIterator (collection)

   local index = 0
   local count = #collection

   -- The closure function is returned

   return function ()
      index = index + 1

      if index <= count
      then
         -- return the current element of the iterator
         return collection[index]
      end

   end

end

for element in elementIterator(array)
do
   print(element)
end

When we run the above program, we will get the following output.

Lua
Tutorial

In the above example, we can see that elementIterator has another method inside
that uses the local external variables index and count to return each of the
element in the collection by incrementing the index each time the function is
called.

We can create our own function iterators using closure as shown above and it
can return multiple elements for each of the time we iterate through the
collection.

ipairs (t)

This functions fetches the indices and values of tables.

next (table [, index])

Allows a program to traverse all fields of a table. Its first argument is a
table and its second argument is an i

unpack (list [, i [, j]])

Returns the elements from the given table.

#--

Tables are called objects and they are neither values nor variables. Lua uses a
constructor expression {} to create an empty table. It is to be known that
there is no fixed relationship between a variable that holds reference of table
and the table itself.

```lua
--sample table initialization
mytable = {}

--simple table value assignment
mytable[1]= "Lua"

--removing reference
mytable = nil

-- lua garbage collection will take care of releasing memory
```

# module

Module is like a library that can be loaded using require and has a single
global name containing a table. This module can consist of a number of
functions and variables. All these functions and variables are wrapped in to
the table, which acts as a namespace. Also, a well behaved module has necessary
provisions to return this table on require.

```lua
-- Assuming we have a module printFormatter
-- Also printFormatter has a funtion simpleFormat(arg)
-- Method 1
require "printFormatter"
printFormatter.simpleFormat("test")

-- Method 2
local formatter = require "printFormatter"
formatter.simpleFormat("test")

-- Method 3
require "printFormatter"
local formatterFunction = printFormatter.simpleFormat
formatterFunction("test")
```

# metatable

A metatable is a table that helps in modifying the behavior of a table it is
attached to with the help of a key set and related meta methods.

setmetatable(table,metatable) − This method is used to set metatable for a table.

getmetatable(table) − This method is used to get metatable of a table.

```lua
mytable = {}
mymetatable = {}
setmetatable(mytable,mymetatable)
```

The above code can be represented in a single line as shown below.

`mytable = setmetatable({},{})`

https://www.tutorialspoint.com/lua/lua_metatables.htm

# coroutines

Coroutines are collaborative in nature, which allows two or more methods to
execute in a controlled manner. With coroutines, at any given time, only one
coroutine runs and this running coroutine only suspends its execution when it
explicitly requests to be suspended.

There is often a comparison of coroutines with the threads of multiprogramming
languages, but we need to understand that coroutines have similar features of
thread but they execute only one at a time and never execute concurrently.
